% ---------------------- %
% -- IMPORTS REQUIRED -- %
% ---------------------- %

% A
\RequirePackage{amssymb}
% N
\RequirePackage{nicematrix}
% R
\RequirePackage{relsize}
% S
\RequirePackage{siunitx}
% T
\RequirePackage{tikz}
% X
\RequirePackage{xstring}

% TikZ libraries
\usetikzlibrary{calc}
\usetikzlibrary{babel}


% ----------- %
% -- UNITS -- %
% ----------- %

\@ifpackagewith{babel}{french}{
    \sisetup{
        list-final-separator  = {et},
        list-pair-separator   = {et},
        range-phrase          = {Ã },
        input-product         = {*},
        output-decimal-marker = {,},
        group-minimum-digits  = 5
    }
}{}


% ---------------- %
% -- SEPARATORS -- %
% ---------------- %

\@ifpackagewith{babel}{french}{
    \newcommand\tnsmathsep{;}
    \newcommand\tnsmathsubsep{,}
}{
    \newcommand\tnsmathsep{,}
    \newcommand\tnsmathsubsep{;}
}


% ----------------------- %
% -- SPACES SEMI COLON -- %
% ----------------------- %

% Sources :
%    * http://forum.mathematex.net/latex-f6/espacement-autour-des-points-virgules-en-mode-maths-t8379.html#p83226
%    * http://forum.mathematex.net/latex-f6/espace-autour-d-un-point-virgule-en-mode-maths-t12323.html#p119334

% This command is adapted from the one given in the following link fro factorial :
% http://www.math.bme.hu/latex/magyar_pre_tug2004.pdf#page=28

\@ifpackagewith{babel}{french}{
    \def\fixmathspacing#1#2#3{%
        \def#1{#3}%
        \expandafter\addto\csname \expandafter
        \ifx\csname mathoptions@on\endcsname\relax% detect nath.sty
            check@mathfonts%
        \else
            mathoptions@on%
        \fi
        \endcsname{%
            \catcode`#212 \mathcode`#2"8000
            \begingroup\lccode`~`#2\lowercase{\endgroup\def~}{#1}
        }
    }

    \fixmathspacing{\fixedsemicolon}{;}{\mathclose{}\mathpunct{}\mathpunct{\mathchar"603B}}
}{}


% ------------ %
% -- SPACES -- %
% ------------ %

% Fractions

\let\stdfrac\frac

\renewcommand\frac[2]{%
    \stdfrac{\, #1 \,}{\, #2 \,}%
}


\let\stddfrac\dfrac

\renewcommand\dfrac[2]{%
    \stddfrac{\, #1 \,}{\, #2 \,}%
}


% Square roots

\let\stdsqrt\sqrt

\renewcommand\sqrt[2][]{%
    \if\relax\detokenize{#1}\relax%
        \stdsqrt{#2\,}%
    \else%
        \stdsqrt[\leftroot{4}\uproot{2}#1]{#2\,}%
    \fi%
}


% ------------------ %
% -- SYMBOLIC VAR -- %
% ------------------ %

% Source
%     * https://tex.stackexchange.com/a/273043/6880

\newcommand\symvar[1][1]{%
    \IfEqCase{#1}{%
        {1}{\text{\raise0.2ex\hbox{$\mathsmaller{\bullet}$}}}%
        {2}{\text{\raise0.2ex\hbox{$\mathsmaller{\circ}$}}}%
        {3}{\vcenter{\hbox{\rule{.65ex}{.65ex}}}}%
    }[%
        \PackageError{tnscom}{unknown option}%
                             {you can use 1 (default), 2 or 3.}%
    ]
}


% ---------------------- %
% -- INTERVAL GENERIC -- %
% ---------------------- %

% Math tools - Intervals and co

\newcommand\tns@extra@vphantom{%
    \vphantom{\relsize{1.25}{\text{$\displaystyle F_1^2$}}}%
}


% #1 : left symbol
% #2 : 1st part
% #3 : 2nd part
% #4 : 3rd part
% #5 : right symbol
\newcommand\tns@generic@interval@semi@ext[5]{%
    \ensuremath{%
        \left#1 \tns@extra@vphantom \right. \kern-.25em%
        #2 #3 #4%
        \left. \tns@extra@vphantom \kern-.05em \right#5%
    }%
}


% #1 : left symbol
% #2 : 1st part
% #3 : 2nd part
% #4 : 3rd part
% #5 : right symbol
\newcommand\tns@generic@interval@ext[5]{%
    \ensuremath{%
        \left#1 #2 #3 #4 \right#5%
    }%
}


% ---------- %
% -- OVER -- %
% ---------- %

% #1 : the text over the symbol
% #2 : the symbol
\newcommand\tns@over@math@symbol[2]{%
    \mathrel{\overset{\mathrm{\text{\raisebox{.5ex}{#1}}}}{#2}}%
}


% --------------------- %
% -- PROPORTIONALITY -- %
% --------------------- %

\newcommand\tns@prop@prod[5]{
    #2 #1 #5 - #4 #1 #3%
}


% -------------------- %
% -- DET CROSS PROD -- %
% -------------------- %

% -- 2D det & criteria of colinearity --%

% Abstraction

%   #1 : & or && (no deco or deco)
%
%   #2 : 1st vector
%   #3 : 2nd vector

\newcommand\tns@det@plane@open@with@vect[3]{%
    \begin{vNiceMatrix}[first-row]
        {\scriptsize#2} #1 {\scriptsize#3} \\
}  


%   #1 : option
%   #2 : & or && (no deco or deco)
%
%   #3 : 1st vector
%   #4 : 2nd vector

\newcommand\tns@det@plane@open[4]{%
    \IfEqCase{#1}{
        {vec}{
            \tns@det@plane@open@with@vect{#2}{#3}{#4}
        }{novec}{
            \begin{vNiceMatrix}
        }%
    }[%
        \PackageError{tnscom}{unknown value for 1st argument}%
                             {you can use vec or novec.}%
	]
}        


% Entries
%
%   #1 : & or && (no deco or deco)
%
%   #2  #4        x  x'
%   #3  #5        y  y'

\newcommand\tns@det@plane@entries[5]{%
    #2 #1 #4 \\
    #3 #1 #5
}        


%   #1 : vector or not
%
%   #2  #5        u  v
%   
%   #3  #6        x  x'
%   #4  #7        y  y'

\newcommand\tns@det@plane@no@deco[7]{%
    \tns@det@plane@open{#1}{&}{#2}{#5}
        \tns@det@plane@entries{&}{#3}{#4}{#6}{#7}
    \end{vNiceMatrix}
}


\newcommand\tns@det@plane@deco@abstract@loop{%
            	\begin{tikzpicture}
                	\path (1-1.east) 
	                   -- node[below = 0.45em,
    	                       red,
        	                   circle,
            	               inner sep = 1.25pt] 
                	      (minus) {\tiny$-$}
                    	  (1-3.west);
                	\draw [red,->]
                    	let \p1 = ($(minus.east) - (minus.center)$) in 
     	                   ([xshift = 0.5mm] 1-1.east)
        	                to[out = 0, in = 137.5]
            	            (minus.50)
                    	    arc[start angle = 50,
                	    end angle = -230,
	                    radius = \x1] 
	                        to[out = 42.5, in =190]
	                        ([xshift = -0.3mm] 1-1.east -| 1-3.west);
            	\end{tikzpicture}
}


\newcommand\tns@det@plane@deco@abstract@cross{%
            	\begin{tikzpicture}
                	\draw [red, <->]
						([xshift = 0.75mm]  1-1.mid east) 
	                 -- ([xshift = -0.75mm] 2-3.mid west);
                	\draw [blue, <->]
						([xshift = 0.75mm]  2-1.mid east) 
	                 -- ([xshift = -0.75mm] 1-3.mid west);
            	\end{tikzpicture}
}


%   #1 : vector or not
%
%   #2  #5        u  v
%   
%   #3  #6        x  x'
%   #4  #7        y  y'
%
%   #8 : curved lines or not

\newcommand\tns@det@plane@deco@loop[7]{%
    \tns@det@plane@open{#1}{&&}{#2}{#5}
        \tns@det@plane@entries{&&}{#3}{#4}{#6}{#7}
       	%%
		\CodeAfter
        \tns@det@plane@deco@abstract@loop{}               
    \end{vNiceMatrix}
}

\newcommand\tns@det@plane@deco@cross[7]{%
    \tns@det@plane@open{#1}{&&}{#2}{#5}
        \tns@det@plane@entries{&&}{#3}{#4}{#6}{#7}
       	%%
		\CodeAfter
        \tns@det@plane@deco@abstract@cross{}               
    \end{vNiceMatrix}
}



% -- Cross product -- %

%   #1 : vector or not
%
%   #2  #6        u  v
%   
%   #3  #7        x  x'
%   #4  #8        y  y'
%   #5  #9        z  z'
%
% Source: https://tex.stackexchange.com/a/554468/6880

\newcommand\tns@cross@prod@deco@loop[9]{%
    \tns@det@plane@open{#1}{&&}{#2}{#6}%
        \tns@det@plane@entries{&&}{#3}{#4}{#7}{#8} \\
        %
        #5                && #9                    \\
        {\color{blue} #3} && {\color{blue} #7}
        %%
        \CodeAfter
        \begin{tikzpicture}
            \path (2-1.east) 
                  -- node[below = 0.3em,
                          blue,
                          circle,
                          inner sep = .4pt]
                     (minusone) {\csname tnsgeo@calc@crossprod@label\endcsname{1}}
                  (2-3.west);
            \draw [blue,->]
                  let \p1 = ($(minusone.east) - (minusone.center)$) in 
                      ([xshift = 0.5mm,yshift=-0.05mm]2-1.east)
                      to[out = 0, in = 137.5]
                      ([yshift=-0.05mm]minusone.50)
                      arc[start angle = 50,
                          end angle = -230,
                          radius = \x1] 
                      to[out = 42.5, in =190]
                      ([xshift = -0.3mm,yshift=-0.05mm]2-1.east-|2-3.west);
            %%
            \path (3-1.east) 
                  -- node[below = 0.3em,
                          red,
                          circle,
                          inner sep = .4pt] 
                     (minustwo) {\csname tnsgeo@calc@crossprod@label\endcsname{2}}
                  (3-3.west);
            \draw [red,->]
                  let \p1 = ($(minustwo.east) - (minustwo.center)$) in 
                      ([xshift=0.5mm,yshift=-0.6mm]3-1.east)
                      to[out = 0, in = 137.5]
                      ([yshift=-0.6mm]minustwo.50)
                      arc[start angle = 50,
                          end angle = -230,
                          radius = \x1] 
                      to[out = 42.5, in =190] 
                      ([xshift = -0.3mm,yshift=-0.6mm]3-1.east-|3-3.west);
            %%
            \path (1-1.east) 
                  -- node[below = 0.3em,
                          orange,
                          circle,
                          inner sep = .4pt] 
                     (minusthree) {\csname tnsgeo@calc@crossprod@label\endcsname{3}}
                  (1-3.west);
            \draw [orange,->]
                  let \p1 = ($(minusthree.east) - (minusthree.center)$) in 
                      ([xshift=0.5mm]1-1.east)
                      to[out = 0, in = 137.5]
                      (minusthree.50)
                      arc[start angle = 50,
                          end angle = -230,
                          radius = \x1] 
                      to[out = 42.5, in =190] 
                      ([xshift=-0.3mm]1-1.east-|1-3.west);
        \end{tikzpicture}
    \end{vNiceMatrix}
}


\newcommand\tns@cross@prod@deco@cross[9]{%
    \tns@det@plane@open{#1}{&&}{#2}{#6}%
        \tns@det@plane@entries{&&}{#3}{#4}{#7}{#8} \\
        %
        #5                && #9                    \\
        {\color{blue} #3} && {\color{blue} #7}
        %%
        \CodeAfter
        \begin{tikzpicture}
			\draw[blue]
				([xshift = 0.75mm , yshift = -0.25mm] 2-1.mid east)
				--
				([xshift = -0.75mm, yshift = 0.25mm]  3-3.mid west);
			\draw[blue]
				([xshift = 0.75mm , yshift = 0.25mm]  3-1.mid east)
				--
				([xshift = -0.75mm, yshift = -0.25mm] 2-3.mid west);
			%
			\draw[red]
				([xshift = 0.75mm , yshift = -0.25mm] 3-1.mid east)
				--
				([xshift = -0.75mm, yshift = 0.25mm]  4-3.mid west);
			\draw[red]
				([xshift = 0.75mm , yshift = 0.25mm]  4-1.mid east)
				--
				([xshift = -0.75mm, yshift = -0.25mm] 3-3.mid west);
			%
			\draw[orange]
				([xshift = 0.75mm , yshift = -0.25mm] 1-1.mid east)
				--
				([xshift = -0.75mm, yshift = 0.25mm]  2-3.mid west);
			\draw[orange]
				([xshift = 0.75mm , yshift = 0.25mm]  2-1.mid east)
				--
				([xshift = -0.75mm, yshift = -0.25mm] 1-3.mid west);
        \end{tikzpicture}
    \end{vNiceMatrix}
}


\newcommand\tns@cross@prod@no@deco[9]{%
    \tns@det@plane@open{#1}{&}{#2}{#6}%
        \tns@det@plane@entries{&}{#3}{#4}{#7}{#8} \\
        %
        #5                & #9                    \\
        {\color{blue} #3} & {\color{blue} #7}
    \end{vNiceMatrix}
}


% --------------------- %
% -- APPLY ON 2 ARGS -- %
% --------------------- %

% #1      : main macro
% #2      : macro to apply to arguments
% #3 - #4 : the two arguments
\newcommand\tns@apply@macro@two@args[4]{%
    #1{#2{#3}}{#2{#4}}%
}


% ---------------- %
% -- MULTI ARGS -- %
% ---------------- %

% -- Multi-arguments (before/after and sep) -- %

% Source : the following lines come directly for the following post
%
%    * https://tex.stackexchange.com/a/475291/6880

\ExplSyntaxOn
% General purpose macro for defining other macros
%
% #1 : separator
% #2 : multiargument
% #3 : code before
% #4 : code between
% #5 : code after
    \NewDocumentCommand{\tns@multi@args}{mmmmmo}{
        \tnscom_multi@args:nnnnnn{#1}{#2}{#3}{#4}{#5}{#6}
    }
 
% Allocate a private variable
    \seq_new:N \l__tnscom_generic_seq

% The internal version of the general purpose macro
    \cs_new_protected:Nn \tnscom_multi@args:nnnnnn{
        % #1 : separator
        % #2 : multiargument
        % #3 : code before
        % #4 : code between
        % #5 : code after
        % #6 : ornament to items

        % A group allows nesting
        \group_begin:
            % Split the multi@argsument into parts
            \seq_set_split:Nnn \l__tnscom_generic_seq { #1 } { #2 }
            % Apply the ornament to the items
            \tl_if_novalue:nF { #6 }{
                \seq_set_eq:NN \l__tnscom_temp_seq \l__tnscom_generic_seq
                \seq_set_map:NNn \l__tnscom_generic_seq \l__tnscom_generic_seq { #6 }
            }
            % Execute the <code before>
            #3
            % Deliver the items, with the chosen material between them
            \seq_use:Nn \l__tnscom_generic_seq { #4 }
            % Execute the <code after>
            #5
            % End the group started at the beginning
        \group_end:
    }   
\ExplSyntaxOff


% -- Apply one macro to each part of a multi-arg -- %

\newcounter{tns@multi@apply@each@position}
\newcommand\tns@multi@apply@each@macro{}


% #1 : macro to apply
% #2 : multi-args
\newcommand\tns@multi@apply@each[2]{
	\setcounter{tns@multi@apply@each@position}{0}
	\renewcommand\tns@multi@apply@each@macro{#1}
	\tns@multi@apply@each@recu#2|\nil
	\renewcommand\tns@multi@apply@each@macro{}
}


\def\tns@multi@apply@each@recu#1|#2\nil{
	\stepcounter{tns@multi@apply@each@position}
	\tns@multi@apply@each@macro{#1}
	\if\relax\detokenize{#2}\relax\else
		\tns@multi@apply@each@recu#2\nil
	\fi
}


% -- Apply one macro to each consecutive couple of a multi-arg -- %

\newcounter{tns@multi@apply@couple@position}
\newcommand\tns@multi@apply@couple@macro{}

% #1 : macro to apply
% #2 : multi-args
\newcommand\tns@multi@apply@couple[2]{
	\setcounter{tns@multi@apply@couple@position}{0}
	\renewcommand\tns@multi@apply@couple@macro{#1}
	\tns@multi@apply@couple@recu#2|\nil
	\renewcommand\tns@multi@apply@couple@macro{}
}


\def\tns@multi@apply@couple@recu#1|#2|#3\nil{
	\stepcounter{tns@multi@apply@couple@position}
	\tns@multi@apply@couple@macro{#1}{#2}
	\if\relax\detokenize{#3}\relax\else
		\tns@multi@apply@couple@recu#2|#3\nil
	\fi
}
